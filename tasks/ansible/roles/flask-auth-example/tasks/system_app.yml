---

# Installing nginx
- name: system_app | Update Debian local repos
  ansible.builtin.apt:
    update_cache: true
    force: true
  become: true
  when: ansible_facts.os_family == 'Debian'
  tags: package_installation

- name: system_app | Update Red Hat local repos
  ansible.builtin.dnf:
    update_cache: true
    force: true
  become: true
  when: ansible_facts.os_family == 'RedHat'
  tags: package_installation

- name: system_app | Install nginx on Debian
  ansible.builtin.apt:
    name: "{{ nginx_packages_map[ansible_facts.os_family] }}"
    state: present
    update_cache: true
  become: true
  when: ansible_facts.os_family == 'Debian'
  tags: package_installation

- name: system_app | Install nginx on Red Hat
  ansible.builtin.dnf:
    name: "{{ nginx_packages_map[ansible_facts.os_family] }}"
    state: present
    update_cache: true
  become: true
  when: ansible_facts.os_family == 'RedHat'
  tags: package_installation

# Configure app
- name: system_app | Check venv
  ansible.builtin.stat:
    path: "{{ venv_path }}/bin/activate"
  register: venv_exist
  tags: app_setup

- name: system_app | Create venv
  ansible.builtin.command: "python3 -m venv {{ venv_path }}"
  args:
    creates: "{{ venv_path }}/bin/activate"
  tags: app_setup

- name: system_app | Install app python requirements
  ansible.builtin.pip:
    requirements: "{{ requirements_path }}"
    virtualenv: "{{ venv_path }}"
    virtualenv_command: "python3 -m venv"
  tags: app_setup

- name: system_app | Create app system service
  ansible.builtin.template:
    src: "flask-auth-example.service.j2"
    dest: "/etc/systemd/system/flask-auth-example.service"
    owner: root
    mode: "0755"
  tags: app_setup
  notify: handlers | main | Systemd daemon-reload

- name: system_app | Start app service
  ansible.builtin.systemd:
    name: "{{ app_name }}"
    state: started
    enabled: true
  tags: app_setup
  become: true

# Configure nginx
- name: system_app | Remove default vhost enabled symlink.
  ansible.builtin.file:
    dest: /etc/nginx/sites-enabled/default
    state: absent
  notify: handlers | main | Restart nginx
  tags: nginx_setup

- name: system_app | Remove default vhost.
  ansible.builtin.file:
    dest: /etc/nginx/sites-available/default
    state: absent
  tags: nginx_setup

- name: system_app | Remove default configs (new version).
  ansible.builtin.file:
    dest: /etc/nginx/conf.d/default.conf
    state: absent
  tags: nginx_setup

- name: system_app | Copying nginx config in sites-available
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: "/etc/nginx/sites-available/{{ app_name }}"
    owner: root
    mode: "0755"
  notify: handlers | main | Restart nginx
  tags: nginx_setup

- name: system_app | Copying nginx config in sites-enabled
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: "/etc/nginx/sites-enabled/{{ app_name }}"
    owner: root
    mode: "0755"
  notify: handlers | main | Restart nginx
  tags: nginx_setup

- name: system_app | Enable nginx
  ansible.builtin.systemd:
    name: nginx
    state: started
    enabled: true
  tags: nginx_setup

- name: system_app | Configure localhost
  ansible.builtin.lineinfile:
    path: "/etc/hosts"
    line: "127.0.0.1 {{ host_name }}"
    state: present
  tags: nginx_setup

# Set up scripts
- name: system_app | Copy script for checking app and server state
  ansible.builtin.copy:
    src: check_app_server_availability.sh
    dest: "{{ app_path }}"
    owner: "root"
    mode: "0755"
  tags: monitoring

- name: system_app | Start cron with checking app and server state script
  ansible.builtin.cron:
    name: Checking app and nginx server state
    user: "root"
    state: "present"
    minute: "*/5"
    job: "{{ app_path }}/check_app_server_availability.sh nginx {{ app_name }}.service"
  tags: monitoring

- name: system_app | Copy script for database backup
  ansible.builtin.copy:
    src: db_backup.sh
    dest: "{{ app_path }}"
    owner: "root"
    mode: "0755"
  tags: monitoring

- name: system_app | Start cron with database backup
  ansible.builtin.cron:
    name: Backup app database
    user: "root"
    state: "present"
    minute: "*"
    hour: "*/2"
    job: "{{ app_path }}/db_backup.sh {{ app_path }}/instance/database.db /var/backups/auth-server"
  tags: monitoring

- name: system_app | Copy rsyslog config file
  ansible.builtin.template:
    src: 30-flask-auth-example.conf.j2
    dest: /etc/rsyslog.d/30-flask-auth-example.conf
    mode: '0755'
  notify: handlers | main | Restart rsyslog
  tags: monitoring
